# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

snippet let "declare an immutable variable" b
let ${1:my_var}: ${2:i32} = ${0:0};
endsnippet

snippet letm "declare a mutable variable" b
let mut ${1:my_var}: ${2:i32} = ${0:0};
endsnippet

snippet const "declare a constant" b
const ${1:my_const}: ${2:i32} = ${0:0};
endsnippet

snippet fn "function declaration" b
fn ${1:my_fn}(${2:para1: i32, para2: f64}) ${3:-> i32 }{
	${0:/*statements*/}
}
endsnippet

snippet fnc "function declaration with comments" b
fn ${2:my_fn}(${3:para1: i32, para2: f64}) ${4:-> i32 }{ // ${1:comments}
	${0:/*statements*/}
}
endsnippet

snippet if "if statement" i
if ${1:/*condition*/} {
	${0:/*statements*/}
}
endsnippet

snippet elif "else if statement"
else if ${1:/*condition*/} {
	${0:/*statements*/}
}
endsnippet

snippet el "else statement"
else {
	${0:/*statements*/}
}
endsnippet

snippet ifel "if...else statement" b
if ${1:/*condition*/} {
	${2:/*statements*/}
} else {
	${3:/*statements*/}
}
endsnippet

snippet loop "loop statement" b
loop {
	${0:/*statements*/}
}
endsnippet

snippet whi "while loop" b
while ${1:/*condition*/} {
	${0:/*statements*/}
}
endsnippet
